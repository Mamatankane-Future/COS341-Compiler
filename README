# Compiler Project

This project is a compiler that processes a source code file written in a RecSPL. The compiler performs lexical analysis, parsing, scope and semantic analysis, type checking, and generates an intermediate representation in BASIC.

## Table of Contents
- [Prerequisites](#prerequisites)
- [Running the Program](#running-the-program)
- [Output Files](#output-files)
- [Important Notes](#important-notes)


### Prerequisites

- Java Development Kit (JDK) installed on your system.
- Basic understanding of command-line operations.

## Running the Program

To run the program, ensure that the input file is in the same directory as `compiler.jar`. Follow these steps:

1. **Execute the Compiler**:
   Use the following command to run the compiler:

   ```bash
   java -jar compiler.jar
   ```

2. **Input File**:
   When prompted, enter the name of the input file without the extension (e.g., `example` for `example.txt`).

## Output Files

After running the program, the following output files and directories will be generated in the same folder as `compiler.jar`:

- **lib/**: Directory containing intermediate files used to compile the program.
  - `lexer.xml`: The file generated by the lexer during lexical analysis.
  - `parser.xml`: The file generated by the parser during parsing.
  - `scope.xml`: XML output from the scope and semantic analyzer after renaming variables and functions.
  - `scope.txt`: Contains the symbol table (the serialized version is in `scope.ser`).
  - `typed.txt`: The symbol table after type checking.
  - `intermediate.txt`: Contains the intermediate code in chapter 6 and 9 format.
- **<filename>.bas**: Which contains the basic intermediate code.

## Important Notes

- Ensure the input file is correctly formatted and placed in the same directory as `compiler.jar`.
- The generated files in the `lib` directory are crucial for understanding the compilation process.
- The **<filename>.bas** will be generated in the same directory as `compiler.jar`